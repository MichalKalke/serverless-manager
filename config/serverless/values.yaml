# Default values for serverless.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

fullnameOverride: "serverless"
injectCerts:
  image:
    pullPolicy: IfNotPresent
migration:
  image:
    pullPolicy: IfNotPresent
tests:
  enabled: true
  labels:
    integration: true
    after-upgrade: true
    e2e-skr: true
  long:
    waitTimeout: 180s
    resources:
      requests:
        memory: 128Mi
        cpu: 10m
      limits:
        memory: 256Mi
        cpu: 200m
    image:
      pullPolicy: IfNotPresent
    namespace: "long-running-function-test"
    name: longrun
  image:
    pullPolicy: IfNotPresent
  disableConcurrency: false
  restartPolicy: Never
  resources:
    requests:
      memory: 32Mi
      cpu: 10m
    limits:
      memory: 64Mi
      cpu: 200m
  envs:
    waitTimeout: 15m
    verifySSL: "false"
    verbose: "false"
    pkgRegistryConfig:
      secretName: "serverless-package-registry-config"
global:
  domainName: "kyma.example.com"
  commonLabels:
    app: '{{ template "name" . }}'
    version: "{{ .Values.global.images.function_controller.version }}"
    app.kubernetes.io/name: '{{ template "name" . }}'
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/version: "{{ .Values.global.images.function_controller.version }}"
    helm.sh/chart: '{{ include "chart" . }}'
  registryServicePort: 5000
  registryNodePort: 32137
  configuration:
    configmapName: "dockerregistry-configuration"
    targetDir: "/appconfig"
    logFilename: "log-config.yaml"
    filename: "config.yaml"
  ingress:
    domainName:
  containerRegistry:
    path: europe-docker.pkg.dev/kyma-project
  images:
    registry:
      name: "tpi/registry"
      version: "2.8.1-1ae4c190"
      directory: "prod"
deployment:
  replicas: 1
  labels: {}
  annotations: {}
  extraProperties: {}
  livenessProbe:
    successThreshold: 1
    failureThreshold: 3
    initialDelaySeconds: 50
    timeoutSeconds: 60
    periodSeconds: 120
  readinessProbe:
    successThreshold: 1
    failureThreshold: 3
    initialDelaySeconds: 10
    timeoutSeconds: 10
    periodSeconds: 30
pod:
  labels: {}
  annotations:
    sidecar.istio.io/inject: "false"
    prometheus.io/scrape: "false"
  extraProperties:
    terminationGracePeriodSeconds: 10
    # the following guidelines should be followed for this https://github.com/kyma-project/community/tree/main/concepts/psp-replacement
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000 # Optional. Use this setting only when necessary, otherwise delete it. Never set to 0 because this is the ID of root.
      runAsGroup: 1000 # Optional. Use this setting only when necessary, otherwise delete it. Never set to 0 because this is the ID of root.
      seccompProfile: # Optional. This option can also be set on container level but it is recommended to set it on Pod level and leave it undefined on container level.
        type: RuntimeDefault
    hostNetwork: false # Optional. The default is false if the entry is not there.
    hostPID: false # Optional. The default is false if the entry is not there.
    hostIPC: false # Optional. The default is false if the entry is not there.
containers:
  daemonset:
    initContainerSecurityContext:
      privileged: false
      allowPrivilegeEscalation: false
      runAsUser: 0
    containerSecurityContext:
      privileged: false
      allowPrivilegeEscalation: false
  manager:
    resources:
      limits:
        cpu: 600m
        memory: 1Gi
      requests:
        cpu: 10m
        memory: 32Mi
    # the following guidelines should be followed for this https://github.com/kyma-project/community/tree/main/concepts/psp-replacement
    containerSecurityContext:
      privileged: false
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      procMount: default # Optional. The default is false if the entry is not there.
      readOnlyRootFilesystem: true # Mandatory
    healthz:
      port: "8090"
    logConfiguration:
      data:
        logLevel: "info"
        logFormat: "json"
    configuration:
      data:
        baseNamespace: "{{ .Release.Namespace }}"
        configMapRequeueDuration: 5m
        secretRequeueDuration: 5m
        serviceAccountRequeueDuration: 5m
        imageRegistryExternalDockerConfigSecretName: '{{ template "fullname" . }}-registry-config'
        imageRegistryDefaultDockerConfigSecretName: '{{ template "fullname" . }}-registry-config-default'
        packageRegistryConfigSecretName: '{{ template "fullname" . }}-package-registry-config'
        imagePullAccountName: '{{ template "fullname" . }}-function'
        healthzLivenessTimeout: "10s"
services:
  manager:
    type: ClusterIP
    labels: {}
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "8080"
      prometheus.io/path: "/metrics"
    https:
      port: 443
      targetPort: 8443
metrics:
  enabled: true
  manager:
    port:
      name: http-metrics
      port: 8080
      targerPort: 8080
      protocol: TCP
  pod:
    labels: {}
    annotations: {}
backendModule:
  enabled: true
clusterMicroFrontend:
  enabled: true
dockerRegistry:
  enableInternal: true
  gateway: "kyma-system/kyma-gateway"
  gatewayCert: "kyma-gateway-certs"
  username: "{{ randAlphaNum 20 | b64enc }}" # for gcr "_json_key"
  password: "{{ randAlphaNum 40 | b64enc }}" # for gcr data from json key
  #  This is the registry address, for dockerhub it's username, for other it's url.
  registryAddress: ""
  #  This is the server address of the registry which will be used to create docker configuration.
  serverAddress: ""
docker-registry:
  fullnameOverride: "internal-docker-registry"
  destinationRule:
    enabled: true
  secrets:
    haSharedSecret: "secret"
    htpasswd: "generated-in-init-container"
  extraVolumeMounts:
    - name: htpasswd-data
      mountPath: /data
  extraVolumes:
    - name: registry-credentials
      secret:
        secretName: serverless-registry-config-default
        items:
          - key: username
            path: username.txt
          - key: password
            path: password.txt
    - name: htpasswd-data
      emptyDir: {}
  rollme: "{{ randAlphaNum 5}}"
  registryHTTPSecret: "{{ randAlphaNum 16 | b64enc }}"
